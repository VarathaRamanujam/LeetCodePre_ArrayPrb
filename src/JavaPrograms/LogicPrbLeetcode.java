package JavaPrograms;

import java.util.*;

public class LogicPrbLeetcode {
    public static void main(String[] args) {
//        int[] heights = {4,12,2,7,3,18,20,3,19};
//        int bricks = 10;
//        int ladders = 2;
//        System.out.println(furthestBuilding(heights,bricks,ladders));

//        romanToInt("MCMXCIV");
//        Character.isAlphabetic()

//        detectCapitalUse("FlaG");

//        System.out.println(hammingWeight(00000000000000000000000000001011));

        //System.out.println(lemonadeChange(new int[]{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,20,5,20,5,5,5,10,20,5,5,10,5,10,5,10,5,5,5,20,10,5,5,5,5,5,5,20,5,10,10,20,5,20,5,5,10,5,20,5,5,5,10,5,10,10,10,10,10,5,20,5,20,20,5,5,5,5,5,5,5,20,10,5,5,5,20,5,5,5,20,5,5,5,5,20,20,5,5,20,20,5,5,5,20,5,5,10,10,10,5,20,20,5,20,5,5,10,10,20,20,5,5,20,10,5,5,10,20,5,20,5,5,5,20,5,20,5,5,5,5,5,5,5,20,20,10,5,5,5,5,20,5,20,20,5,10,10,20,20,20,5,5,5,5,10,10,5,5,20,20,10,5,5,10,20,5,5,5,5,5,20,10,20,5,5,5,10,5,5,5,10,5,5,10,10,20,5,5,10,10,10,10,5,5,5,5,20,10,5,20,10,5,5,5,20,10,5,5,5,5,5,5,5,10,10,10,5,20,5,5,5,5,20,5,10,10,20,5,5,5,5,10,5,5,5,10,10,5,5,5,5,5,10,5,5,10,20,20,5,10,5,5,5,10,5,5,5,20,5,5,5,20,5,5,5,5,5,10,10,5,5,5,5,5,10,10,5,5,5,20,5,5,5,5,5,5,5,5,10,5,10,5,20,5,20,20,5,20,5,10,20,5,5,5,5,5,5,5,10,5,20,5,10,5,10,5,5,5,5,20,10,5,20,10,5,10,5,5,20,10,20,10,5,5,5,5,5,5,20,5,10,10,20,5,5,10,5,5,5,5,20,20,5,10,5,5,20,5,10,5,20,5,5,5,20,5,5,5,10,5,10,20,20,10,5,20,20,10,10,20,5,20,5,5,10,5,5,10,5,5,20,5,5,5,5,5,5,5,5,5,5,20,5,5,5,20,5,10,5,10,10,20,5,5,5,20,5,5,20,5,20,5,5,5,10,5,5,10,20,5,5,10,10,5,5,5,20,20,20,5,5,5,20,10,20,20,10,5,5,5,5,10,5,5,5,5,5,10,5,5,5,5,5,5,5,20,5,5,10,20,5,5,5,5,10,5,5,5,20,5,5,20,20,10,20,10,5,5,5,5,20,20,10,10,20,20,5,5,5,5,5,5,5,5,10,5,5,20,5,5,5,20,5,5,10,10,5,5,5,5,10,5,5,5,5,10,5,10,5,20,5,5,5,10,5,20,5,20,5,5,5,5,10,5,20,5,10,5,5,5,10,5,10,10,5,5,10,20,5,5,5,10,5,5,5,5,10,10,5,10,10,20,5,10,5,5,5,5,5,10,20,20,5,5,5,5,10,10,5,20,5,5,10,5,20,5,5,5,5,5,10,10,5,5,5,5,10,5,5,20,5,5,5,5,5,5,20,5,5,10,5,5,5,10,5,5,5,5,20,5,5,20,10,20,20,20,5,10,5,5,5,5,20,5,5,10,10,10,5,5,20,5,5,20,20,5,5,5,20,5,5,5,5,20,5,5,10,5,20,10,5,5,5,20,5,10,10,5,5,5,20,5,5,5,5,5,5,10,5,5,10,10,5,20,10,20,5,5,5,5,5,20,5,5,20,5,5,5,5,20,5,5,20,10,20,10,5,20,5,5,5,5,5,5,5,5,20,5,20,5,10,5,10,5,5,5,10,5,10,5,5,5,5,20,10,10,5,10,5,5,5,20,20,5,5,5,5,5,20,5,5,10,20,5,5,5,5,5,5,5,5,5,5,10,20,5,10,5,5,5,10,5,5,5,5,10,10,10,10,5,10,5,20,5,5,20,10,5,5,5,5,5,5,5,5,5,20,5,5,10,10,5,10,5,10,5,5,20,20,5,10,5,10,5,5,20,10,5,20,5,20,20,5,10,10,10,10,20,10,5,5,5,20,5,10,20,5,5,5,5,10,5,20,20,5,20,5,10,20,5,5,5,5,5,5,10,5,5,5,20,5,5,5,5,10,5,20,20,20,5,5,20,20,5,5,5,20,5,5,20,5,5,5,5,5,5,5,5,10,20,5,5,10,10,5,10,10,20,5,5,5,5,20,20,5,10,10,5,5,5,5,5,20,5,5,5,10,20,5,5,10,20,5,20,5,20,10,5,20,20,5,20,5,5,10,20,5,5,20,10,5,10,5,5,5,5,5,5,5,10,10,20,10,20,10,5,5,20,5,10,5,10,10,5,5,5,5,5,5,5,20,10,20,20,10,10,20,5,5,20,5,20,5,10,5,10,20,20,10,20,5,5,5,5,5,5,5,20,5,10,10,10,5,20,20,10,5,20,5,5,5,5,10,10,5,5,5,20,20,5,10,5,5,5,10,5,10,20,20,5,20,5,5,5,5,20,20,5,20,10,20,5,5,5,20,5,5,20,10,5,10,10,10,5,5,5,5,5,5,10,5,5,20,20,5,10,5,5,5,5,5,20,5,5,10,5,5,5,5,10,10,10,10,5,20,5,5,20,10,5,5,20,5,5,5,5,5,10,5,5,5,5,10,5,5,5,10,5,5,5,5,20,10,5,5,5,5,5,20,5,20,5,5,5,5,5,10,5,5,20,20,5,5,5,5,10,20,10,5,10,10,5,10,5,20,5,5,20,20,5,10,5,5,5,5,20,10,5,5,5,20,5,10,5,5,10,5,5,10,5,5,5,10,5,5,5,20,5,10,5,5,5,5,5,20,20,5,5,5,5,5,5,20,5,5,5,5,5,20,5,5,5,10,10,10,5,10,20,5,20,20,5,5,5,5,10,5,5,5,10,10,5,5,5,10,5,20,5,5,5,5,5,5,5,5,5,10,5,5,5,10,5,5,10,5,5,5,5,5,5,20,5,5,5,5,5,10,5,5,5,5,10,5,10,5,20,20,20,10,20,5,5,5,5,5,5,5,5,20,20,20,5,10,20,20,20,20,5,5,20,10,20,5,5,5,5,5,5,5,5,20,5,5,5,10,10,5,5,20,20,5,5,5,5,5,5,20,5,5,5,20,5,5,5,5,10,20,5,20,20,20,10,5,5,5,5,5,5,5,20,20,10,5,10,5,5,5,5,5,10,5,20,5,10,5,20,20,5,5,20,5,20,5,10,5,5,5,20,20,10,5,10,10,20,5,5,5,5,5,5,10,5,20,5,5,5,5,20,5,5,5,5,20,10,5,5,20,10,5,5,5,5,10,10,5,5,5,5,20,5,5,5,10,5,5,10,5,5,5,5,5,5,20,10,5,20,5,10,5,5,5,5,5,5,5,5,10,5,5,20,5,5,5,20,20,5,20,10,10,5,5,10,10,5,5,5,20,5,5,5,5,10,5,5,5,5,5,20,10,5,20,5,5,5,5,5,20,5,5,5,5,5,5,5,5,5,5,20,5,5,5,5,10,10,10,5,5,5,10,20,5,5,5,5,10,20,20,20,5,10,10,20,20,5,5,5,5,5,5,5,5,10,20,5,5,5,5,10,10,5,20,5,5,5,5,5,20,5,10,5,5,5,20,5,5,5,5,20,5,10,20,5,5,5,5,5,5,10,5,5,5,10,20,5,10,10,5,5,10,5,10,10,5,5,5,5,10,5,5,5,5,20,5,10,5,5,5,5,5,10,20,5,10,10,20,5,10,20,20,20,5,5,20,5,20,10,20,10,5,10,5,5,10,5,5,5,5,5,5,10,10,5,5,5,10,5,20,20,5,5,20,5,10,5,5,5,10,20,5,10,5,5,5,5,20,5,5,5,5,5,5,10,5,5,10,5,5,5,20,20,5,5,5,5,5,5,5,5,5,5,20,10,10,20,10,20,20,5,5,10,10,5,5,10,5,20,5,20,10,5,10,5,5,20,5,5,5,5,5,5,10,10,5,20,10,5,20,20,5,20,5,10,5,20,5,10,5,5,5,5,5,5,5,20,10,20,5,5,5,5,20,10,5,5,5,10,5,5,5,20,5,5,5,5,10,5,5,10,5,20,10,5,10,5,5,5,5,5,10,10,20,5,5,20,5,5,20,5,5,5,10,20,5,5,5,5,5,5,10,10,5,10,5,5,5,5,20,10,5,20,5,10,5,20,20,10,5,5,5,5,20,5,10,5,20,5,5,5,5,5,10,5,20,10,20,20,10,5,10,10,5,20,20,5,20,20,5,5,5,20,5,10,5,5,5,20,5,5,5,5,5,5,10,20,10,5,5,5,5,20,5,5,5,5,10,5,20,5,5,10,5,10,10,5,5,5,5,10,5,5,5,5,5,10,5,5,10,5,5,20,20,10,5,10,20,10,10,5,20,5,20,10,5,5,10,5,5,5,20,5,20,5,5,5,5,5,5,5,5,5,5,20,20,10,10,5,5,20,5,10,5,10,5,5,20,20,20,20,10,20,5,5,5,10,5,10,5,5,5,20,5,10,20,20,5,5,10,5,5,20,5,5,10,5,5,5,5,5,5,5,10,5,10,10,20,5,5,10,10,10,10,20,20,10,10,5,5,5,5,10,10,5,10,5,10,5,5,10,5,20,20,5,10,5,5,5,5,5,5,10,10,10,5,5,5,5,5,5,20,5,5,10,5,20,5,5,20,20,5,20,20,5,5,20,20,5,5,5,10,10,5,5,5,5,5,5,5,5,20,5,5,20,10,5,20,10,20,5,20,10,5,5,5,5,10,20,10,20,10,5,5,5,20,5,20,20,5,5,20,5,5,5,5,5,10,5,5,5,5,10,20,10,5,5,10,20,10,10,10,5,5,5,10,20,20,10,5,5,20,5,5,5,10,10,5,5,10,5,20,20,5,5,5,10,5,5,5,20,5,10,5,10,5,5,5,10,20,5,5,10,10,10,20,5,20,5,20,5,5,10,5,5,10,5,5,5,5,10,5,5,20,10,5,5,10,5,5,20,5,5,20,20,10,5,5,10,5,20,20,5,5,20,20,5,10,10,20,5,20,5,5,10,5,10,5,5,5,5,5,5,5,5,5,5,5,5,20,20,10,5,10,20,20,5,20,10,10,5,5,20,10,10,5,5,5,10,10,5,20,10,20,20,10,20,10,10,5,20,5,5,20,10,5,5,20,5,5,10,10,5,20,5,10,5,20,5,5,5,5,20,5,20,20,10,20,20,5,5,5,5,5,20,5,5,10,5,5,10,20,5,5,10,10,20,5,5,5,20,5,5,20,10,5,5,5,20,5,5,10,10,10,5,10,5,10,5,5,20,5,5,5,5,10,5,5,10,5,20,5,5,5,10,20,5,10,20,20,10,10,10,20,5,5,5,5,5,20,10,5,5,5,5,5,5,20,20,5,5,5,5,5,10,5,20,5,20,20,5,20,20,5,10,5,5,10,5,5,10,5,5,10,20,5,5,10,10,5,5,5,5,5,5,20,5,5,20,10,5,5,5,5,5,20,10,5,5,5,5,5,5,10,5,20,5,20,5,20,5,5,5,5,5,5,5,10,20,5,5,10,5,5,5,5,20,5,5,10,10,5,5,5,10,5,5,20,5,5,5,5,5,5,20,5,5,10,5,5,5,5,20,5,20,5,5,20,5,5,10,20,5,20,5,5,20,5,5,10,10,10,20,5,5,10,5,20,5,5,10,20,5,5,10,5,10,5,5,20,10,20,5,5,20,20,5,20,10,10,5,5,10,5,5,5,5,20,5,5,5,5,10,5,20,20,5,5,20,20,5,20,5,5,5,5,20,5,10,10,5,5,10,5,5,5,5,10,20,10,5,5,5,5,5,5,20,5,10,5,5,5,5,20,20,5,10,5,5,10,10,5,10,5,10,5,5,5,20,20,5,5,5,10,5,20,10,5,10,5,5,5,5,10,5,5,5,5,5,5,5,5,20,5,10,10,20,5,5,5,20,5,5,5,5,5,20,5,20,5,5,20,10,5,20,5,5,10,10,20,20,5,5,10,20,20,5,10,20,10,20,5,5,5,5,20,5,20,5,5,20,20,10,20,5,5,5,10,20,5,5,5,20,5,5,5,5,5,5,20,5,5,5,20,5,5,5,20,20,5,5,5,20,5,20,5,10,10,5,10,5,10,10,20,5,20,20,5,10,5,5,5,5,5,10,5,10,5,5,5,5,5,5,5,20,5,5,5,5,5,20,5,5,5,5,5,20,20,5,5,5,5,5,20,20,5,5,20,5,5,5,5,10,5,5,10,20,5,5,5,20,20,10,5,5,20,5,5,5,5,5,5,5,5,5,5,20,5,5,5,20,20,20,20,20,10,5,5,5,20,5,10,10,10,5,10,10,10,5,5,20,20,5,5,5,5,10,5,5,5,20,10,5,5,5,5,5,10,20,10,20,5,5,5,10,5,20,5,10,10,5,20,10,20,5,5,5,5,5,10,20,5,5,5,5,5,5,10,20,10,20,20,5,5,10,5,5,5,20,5,20,10,10,5,5,5,5,5,20,5,5,5,5,5,5,20,5,20,5,20,5,5,5,20,5,5,5,5,20,20,20,5,5,5,10,5,10,20,5,20,5,5,5,5,10,5,5,20,5,5,5,10,5,5,5,20,10,20,5,5,20,5,10,5,5,5,10,5,5,5,10,20,20,10,5,5,5,5,20,5,20,5,5,5,20,5,5,5,5,20,5,5,20,5,5,5,5,20,20,5,10,5,5,5,5,5,5,5,5,5,20,5,10,5,20,20,20,20,10,5,10,5,20,5,5,20,10,20,5,5,5,20,5,5,5,5,10,5,5,20,5,10,5,5,10,5,20,5,10,5,20,20,5,5,20,20,5,20,5,5,5,20,5,20,5,5,5,10,5,5,5,5,5,20,5,5,5,5,5,5,10,20,20,5,5,20,20,10,5,20,5,10,20,5,5,5,5,5,5,5,5,10,20,5,5,5,5,10,5,20,5,10,5,5,20,10,5,5,5,5,5,5,5,5,5,10,5,5,5,20,5,20,10,10,10,5,5,5,5,10,10,10,5,10,5,20,20,20,20,5,5,5,20,5,5,5,20,10,5,20,5,10,20,5,5,10,20,20,10,5,5,5,5,5,5,5,5,20,20,5,5,5,20,10,10,10,5,5,5,20,5,10,5,10,20,5,10,5,5,5,20,5,5,5,5,5,5,5,20,5,10,5,5,5,10,5,20,20,5,5,5,10,5,5,5,5,10,5,5,20,5,5,10,10,5,20,10,20,10,10,5,5,5,5,5,10,5,5,5,10,5,5,20,10,20,20,20,10,20,5,5,5,5,5,5,20,5,20,20,5,5,10,10,5,5,20,5,5,5,5,20,10,20,5,5,5,5,10,5,5,5,5,20,5,10,5,5,10,5,5,5,5,5,5,5,5,5,5,10,5,10,20,10,5,20,20,5,5,20,20,10,5,5,10,5,5,10,20,20,5,20,20,10,10,5,5,5,20,20,5,5,20,20,5,5,10,5,20,5,5,20,20,10,20,5,20,5,20,20,5,5,10,10,10,10,5,5,5,10,10,10,20,5,5,5,5,5,5,5,10,10,10,5,20,5,10,10,20,5,5,5,20,5,5,5,5,5,10,5,10,5,10,5,20,20,20,5,10,5,5,10,5,5,5,20,5,10,5,10,5,5,10,5,20,5,5,10,20,5,20,5,5,20,20,5,5,20,5,5,5,5,5,5,10,10,5,10,10,5,5,5,5,20,5,5,5,5,5,20,5,5,5,5,20,10,10,5,5,5,10,5,5,20,5,5,5,5,5,5,5,20,20,20,5,20,5,5,5,10,5,5,5,5,5,10,20,5,10,10,10,5,5,20,20,5,10,5,5,5,20,20,10,5,5,5,5,20,20,5,5,5,20,5,10,5,5,5,5,5,5,10,5,5,5,5,20,10,10,5,5,5,5,5,10,5,5,5,5,5,5,5,5,20,10,5,20,5,10,5,20,5,5,5,5,20,5,5,5,5,20,20,5,10,5,20,5,20,5,20,20,5,20,5,5,5,5,10,20,5,20,5,5,5,20,10,10,5,5,5,5,5,10,5,10,5,5,5,5,20,5,5,20,20,5,5,10,5,20,10,5,10,10,10,5,20,20,5,5,5,5,5,5,20,5,5,5,20,5,10,5,5,5,5,5,5,5,10,5,10,10,5,5,5,5,5,20,5,10,5,5,5,5,20,10,5,5,5,20,20,5,10,5,10,5,5,5,5,5,5,20,5,10,10,20,20,5,20,10,20,20,5,5,10,5,20,5,5,10,10,20,5,5,5,5,5,5,5,5,5,20,5,5,5,5,20,20,10,5,5,5,5,5,5,20,10,5,5,5,10,5,5,10,20,5,10,5,10,10,10,5,20,5,5,20,10,10,5,20,5,5,10,5,5,20,10,5,5,5,5,5,10,20,20,5,5,5,20,20,10,20,10,5,5,20,10,5,5,5,5,10,5,10,5,5,20,10,5,5,20,5,5,20,5,5,5,5,5,5,5,5,20,10,5,5,5,10,5,5,5,20,5,10,5,5,10,20,5,10,5,20,5,10,5,5,5,5,5,20,5,5,5,5,5,20,5,5,10,10,20,20,5,5,10,20,20,5,20,5,5,5,5,5,5,10,5,20,10,20,20,5,5,5,5,5,5,20,5,10,20,5,5,20,5,5,5,5,20,20,5,5,5,10,10,5,5,5,5,20,5,5,20,5,20,20,5,20,5,5,5,5,20,20,5,10,5,5,10,10,10,5,20,10,10,10,20,10,5,5,5,5,5,10,20,10,20,5,10,5,5,20,10,20,5,20,5,10,5,5,5,20,10,20,5,5,5,10,10,5,10,5,5,5,5,5,20,5,5,20,5,20,20,20,20,5,5,5,10,5,20,5,10,20,20,10,5,20,5,20,5,5,10,5,5,5,5,5,5,5,5,20,5,10,5,5,20,5,20,5,5,5,5,5,20,5,5,10,10,10,5,5,5,10,10,5,5,5,5,5,10,20,5,20,5,20,20,10,5,5,20,10,5,10,5,5,5,5,5,5,20,20,20,20,5,5,5,10,5,10,10,10,5,5,5,5,5,10,5,20,5,20,5,5,5,5,5,5,20,5,5,10,20,10,5,20,20,5,20,20,5,5,5,5,5,10,5,5,10,10,5,5,5,5,5,5,5,5,5,20,5,5,5,10,10,5,5,5,5,5,5,5,10,20,5,5,20,10,5,20,5,5,20,10,10,10,5,10,10,5,5,5,20,10,5,10,20,5,5,10,5,5,5,5,5,5,10,5,5,20,5,5,20,20,10,5,5,5,10,5,5,5,20,5,5,10,5,10,10,20,5,5,20,5,20,20,5,20,5,5,5,5,20,10,5,20,5,20,5,5,20,5,5,10,20,5,20,10,5,5,20,5,20,5,10,5,5,5,10,10,5,20,10,5,20,20,5,20,5,5,20,5,10,5,5,5,5,20,10,5,5,10,5,5,5,20,5,5,5,5,20,5,5,5,10,20,5,5,5,5,5,5,5,5,5,5,10,20,10,5,5,5,5,20,5,5,10,20,5,5,5,5,10,20,5,5,5,10,5,5,5,5,5,20,20,20,5,5,5,5,5,5,20,5,20,20,10,5,10,5,5,5,5,5,5,5,5,10,20,10,20,20,10,5,20,5,10,20,10,20,5,5,10,20,5,5,5,5,20,20,5,10,10,20,5,5,5,5,5,5,20,5,10,5,20,10,5,5,5,5,5,5,5,5,5,5,5,10,5,5,5,5,5,5,5,20,5,20,5,5,5,5,5,5,5,10,10,20,20,5,5,20,10,20,5,10,10,10,20,20,5,20,20,5,10,10,20,5,10,10,5,5,20,5,5,20,10,5,20,20,5,5,20,5,5,5,20,20,5,5,5,5,10,20,5,5,20,5,20,10,10,10,5,20,5,10,10,10,20,20,5,5,5,10,5,20,5,5,5,5,5,5,5,5,5,5,20,5,5,10,5,5,10,5,5,5,5,5,5,5,20,10,20,5,20,5,5,5,5,5,20,5,5,5,20,5,5,5,5,5,20,20,10,5,5,10,5,5,10,10,20,20,5,5,20,10,5,5,5,5,5,20,10,5,5,10,10,5,10,5,10,5,5,20,20,20,10,20,5,5,20,5,5,5,20,20,10,5,5,20,20,5,5,10,5,5,20,5,20,10,10,20,5,5,5,10,20,5,5,20,5,5,5,5,5,10,5,5,20,5,5,20,20,20,5,10,5,5,5,5,5,5,5,5,5,20,5,5,20,5,5,5,10,20,20,10,5,10,5,5,10,10,10,5,5,5,10,5,5,10,5,5,5,20,5,5,10,5,5,5,5,5,5,10,20,10,5,5,20,20,10,5,10,5,5,5,5,5,5,5,5,5,5,5,5,5,20,5,10,20,20,5,10,5,10,10,5,5,5,5,5,20,5,20,10,20,5,20,5,5,5,10,5,10,5,5,5,5,10,5,10,20,5,5,5,10,5,5,10,5,10,5,10,5,10,20,5,5,5,5,5,5,5,5,5,5,10,20,20,20,10,5,5,10,5,5,5,5,20,5,5,20,5,20,5,5,5,5,5,5,5,20,5,10,5,5,20,5,5,20,20,5,20,20,5,10,5,5,5,5,20,5,5,10,20,10,20,5,20,5,20,20,10,5,5,5,5,5,5,10,5,5,20,10,20,5,5,5,5,10,5,20,5,5,5,10,5,20,20,5,20,5,5,20,5,20,5,5,10,5,5,20,5,5,5,5,5,10,20,20,5,5,5,10,5,20,5,10,5,10,20,5,10,5,5,5,5,20,5,10,5,5,5,5,10,10,20,20,20,5,10,5,5,20,5,5,5,5,10,10,10,5,20,5,10,5,10,10,5,20,5,5,10,20,20,5,5,5,5,5,5,5,5,10,20,10,5,5,10,10,20,5,5,5,5,5,20,5,10,5,10,5,5,5,20,10,20,5,10,5,5,5,20,5,5,5,5,5,10,5,5,20,5,5,5,5,5,5,10,5,10,20,5,5,5,10,5,10,5,20,10,20,5,5,5,5,5,5,5,10,20,5,20,20,5,5,10,20,10,5,5,5,5,10,20,5,5,5,5,5,10,10,5,5,5,5,10,5,10,10,10,10,5,5,20,5,5,5,20,5,20,5,10,10,5,5,5,5,5,10,10,20,20,5,5,5,5,10,5,10,5,20,5,5,10,5,5,5,10,10,20,5,10,5,5,5,5,10,20,5,10,5,5,5,10,5,5,5,5,10,5,5,5,20,5,5,10,5,5,5,5,20,20,5,5,5,5,10,5,10,5,10,10,5,5,10,10,5,5,5,10,5,10,20,10,20,20,5,5,5,5,10,5,20,5,5,10,5,5,20,5,5,5,5,20,10,5,10,20,10,20,5,5,5,5,5,5,5,20,20,10,5,5,20,5,20,10,20,10,5,20,5,20,10,20,20,5,5,20,5,20,10,5,5,5,10,5,5,5,5,5,5,5,5,10,10,20,5,5,10,10,20,20,5,10,5,5,5,5,10,5,5,10,5,5,20,5,20,10,5,5,5,20,5,10,5,20,20,5,5,10,10,5,5,5,20,20,5,5,5,20,10,5,5,10,5,5,5,5,5,10,5,10,5,5,5,20,5,10,5,5,5,20,10,5,5,10,5,10,5,5,10,20,10,5,5,20,5,5,20,5,5,5,5,10,5,10,5,5,5,20,5,10,5,10,20,20,20,5,10,20,5,5,5,5,10,5,5,5,10,5,20,20,10,5,5,5,10,5,20,20,5,10,20,10,10,10,20,5,5,20,5,20,10,20,20,5,20,10,10,5,5,10,10,5,10,20,20,5,10,10,5,5,5,5,5,20,5,5,10,10,10,5,10,5,5,10,20,5,20,5,10,5,5,20,20,10,5,10,10,5,20,10,10,5,5,5,20,10,10,20,5,5,20,5,10,5,10,10,20,5,5,5,10,20,10,10,5,5,5,10,5,10,5,20,10,5,5,5,20,5,5,10,20,5,10,10,5,20,5,5,20,5,5,5,20,5,5,5,5,10,10,5,5,10,10,5,20,5,5,10,10,5,5,10,5,20,10,5,20,5,5,5,10,20,5,10,5,20,5,5,5,5,5,10,5,5,10,5,20,5,10,5,5,20,5,5,5,10,5,20,20,20,5,10,5,5,5,5,5,10,20,10,5,5,5,20,10,10,20,5,5,5,5,10,10,5,20,5,20,20,5,20,10,5,20,5,5,5,10,20,20,5,5,5,5,5,5,20,10,20,20,5,5,5,5,5,5,10,10,20,5,5,5,10,5,10,5,10,5,20,10,5,5,5,5,5,20,20,20,5,5,5,5,10,5,5,20,5,10,10,20,5,5,5,10,5,5,20,5,20,5,10,5,5,5,5,5,5,5,5,5,5,5,5,5,10,20,5,20,5,5,5,20,5,20,20,5,5,5,10,5,20,10,5,10,20,5,20,10,5,5,10,20,5,20,5,20,20,5,20,5,10,10,5,5,5,5,20,5,5,20,20,5,5,5,10,20,5,5,20,5,5,5,10,10,5,10,5,20,10,10,5,20,10,20,5,5,5,5,5,5,20,10,20,5,10,5,5,10,20,5,5,10,5,5,20,5,5,5,10,20,10,5,5,20,5,5,5,5,20,20,10,5,20,5,5,5,5,5,5,5,20,5,5,10,20,20,5,5,10,20,5,5,10,5,5,5,5,20,5,5,20,10,5,5,5,20,5,10,5,5,5,10,20,5,10,20,5,5,5,5,5,5,5,10,5,20,5,20,20,5,5,5,5,20,5,20,5,10,5,5,5,5,5,5,5,5,5,5,10,5,10,5,5,20,5,5,20,5,5,20,20,20,5,5,5,5,5,10,5,10,10,20,20,20,5,5,5,20,5,5,5,20,10,5,5,10,5,20,5,10,5,5,10,20,5,20,10,20,20,5,10,10,10,10,10,20,20,20,5,5,5,5,5,20,10,5,5,20,20,5,10,5,10,5,10,10,5,10,5,5,20,5,10,5,10,10,20,5,10,5,20,5,10,5,10,20,10,20,5,5,5,5,5,10,20,5,5,5,5,20,20,5,20,5,5,5,20,5,5,20,5,5,5,5,10,5,5,5,5,5,5,10,5,5,5,5,20,20,10,20,5,5,5,5,5,10,20,10,5,5,5,5,10,5,5,10,5,5,5,5,10,10,20,5,5,20,5,5,10,5,10,5,5,5,5,5,5,20,5,5,20,5,20,5,20,5,20,10,5,5,10,5,20,5,5,5,10,10,20,5,5,5,20,10,20,5,5,5,5,5,10,5,5,5,5,20,10,5,10,20,20,5,20,20,10,20,10,10,10,5,5,10,20,5,10,5,5,20,10,5,10,5,10,10,10,20,20,5,20,5,10,5,10,5,5,5,20,5,20,20,5,10,5,5,5,5,5,20,5,5,5,20,5,5,5,5,5,5,5,5,5,5,5,20,5,5,5,10,5,5,20,5,5,10,20,10,10,10,5,10,5,5,10,5,5,5,10,5,5,5,20,20,5,20,5,5,5,20,5,20,5,5,5,20,5,20,20,5,5,10,20,20,5,5,5,20,5,5,20,5,5,20,5,20,10,5,5,5,5,20,10,20,10,20,10,5,5,10,5,5,5,5,5,5,5,5,5,5,10,10,5,20,20,5,20,20,5,10,10,5,5,5,5,5,5,10,20,20,5,5,5,20,5,5,5,5,10,5,5,20,5,5,20,20,20,10,20,5,5,5,10,5,5,20,5,20,20,5,10,20,5,5,10,5,10,5,5,5,5,5,5,5,10,10,5,5,5,5,20,5,5,10,20,5,10,5,10,5,10,20,5,5,5,5,5,10,20,5,10,10,10,5,5,5,5,10,20,20,5,20,20,5,10,5,5,5,10,20,10,5,5,5,5,5,5,5,20,20,5,5,5,5,5,10,5,20,5,20,10,5,10,5,5,5,10,5,10,5,20,5,5,10,5,20,5,5,5,10,5,20,20,20,10,5,10,10,10,5,5,5,5,20,5,20,10,5,5,5,5,5,5,10,5,20,20,10,10,20,5,5,5,10,10,5,20,5,10,20,20,5,20,5,5,5,5,5,10,5,5,5,10,5,10,5,20,5,10,10,10,5,5,10,5,10,5,5,20,5,5,5,5,5,5,10,5,5,10,10,5,20,20,5,5,5,20,5,20,20,5,20,10,10,10,5,5,10,20,10,5,5,20,5,5,10,5,20,5,5,5,5,5,20,5,5,20,10,5,5,5,5,10,5,5,5,20,5,5,20,10,10,5,10,10,5,20,10,20,10,10,10,5,5,10,5,5,5,10,5,5,5,5,5,5,5,5,5,5,20,5,10,5,5,5,5,5,5,5,20,20,20,5,5,5,10,10,5,5,20,20,5,5,5,20,10,20,5,5,20,5,5,20,10,20,5,5,20,10,10,20,20,5,5,20,20,5,5,20,5,5,5,5,5,10,5,5,20,5,5,20,20,5,20,5,10,5,5,20,5,20,10,5,5,5,5,5,5,10,5,5,5,20,5,5,10,20,10,5,5,20,10,10,20,20,5,10,10,20,20,5,5,20,20,5,10,5,5,5,5,5,5,5,5,5,10,20,5,5,5,5,20,10,10,20,20,5,5,20,10,5,5,10,5,5,20,10,5,20,5,10,10,5,5,10,20,5,20,5,5,20,5,5,10,5,5,10,5,5,10,5,5,5,5,5,10,5,5,20,20,20,5,5,5,5,5,5,10,5,20,10,5,10,20,5,5,5,10,10,20,5,10,10,10,10,5,5,20,5,5,5,10,5,5,10,10,20,5,5,10,10,20,10,5,5,5,5,20,20,5,20,5,20,5,10,5,5,5,5,5,5,5,20,5,5,5,5,10,5,20,10,5,5,20,5,20,10,5,5,5,5,20,5,20,10,5,5,5,10,20,5,10,10,5,5,5,5,10,5,20,5,5,5,20,10,5,10,5,10,5,5,10,5,5,5,5,5,10,5,20,5,10,5,20,20,5,5,5,5,10,5,10,5,5,20,5,10,5,10,5,5,20,5,10,5,20,20,5,20,5,20,5,5,5,5,20,10,5,5,5,5,10,5,10,10,20,20,5,5,5,10,5,20,5,10,10,5,5,20,5,5,5,5,10,10,10,10,10,20,5,10,5,20,5,10,20,10,10,5,5,5,5,5,10,5,5,5,5,10,5,10,10,20,5,5,5,5,20,5,20,20,20,5,5,5,5,5,10,5,5,5,20,5,5,5,5,20,20,5,10,10,5,5,20,20,5,10,5,10,10,5,10,20,20,5,10,20,10,20,5,5,5,10,20,5,10,5,5,5,20,5,10,5,5,5,5,20,10,10,5,5,5,10,5,20,5,5,5,5,5,10,5,5,5,5,5,5,10,10,5,10,5,10,5,5,5,5,5,20,10,5,5,20,10,20,5,10,20,10,5,5,5,5,20,10,20,5,10,10,5,10,20,5,20,5,20,5,5,5,5,5,5,10,5,5,5,5,5,5,5,10,20,10,20,5,20,5,5,10,20,5,5,5,5,20,20,20,10,5,5,5,5,20,5,5,5,5,5,10,5,20,5,5,10,20,5,20,5,5,5,5,20,10,10,5,10,10,5,5,5,10,20,20,20,5,5,5,10,5,5,20,5,10,10,5,10,5,5,10,5,10,5,5,5,20,10,10,20,5,20,5,5,5,10,5,10,5,5,20,5,10,5,20,5,20,5,10,5,5,5,5,10,5,5,5,5,5,5,5,5,5,5,20,20,5,10,5,5,20,5,20,10,10,20,5,5,5,5,5,5,5,5,20,5,5,5,5,5,5,5,5,20,5,5,5,20,5,5,5,20,5,5,20,20,5,5,5,20,10,5,5,20,5,5,5,5,5,5,20,10,5,5,5,5,10,5,5,5,20,5,5,20,5,10,5,5,10,20,10,5,20,5,5,5,10,20,10,5,10,5,5,5,5,5,20,20,20,20,5,20,20,5,5,5,10,10,5,20,5,20,5,5,5,20,10,5,5,5,20,10,5,20,5,20,20,5,5,10,5,5,5,5,5,5,10,20,10,20,5,5,10,5,20,5,5,10,10,5,5,5,20,10,10,5,5,10,5,5,5,20,5,20,5,5,20,5,20,10,20,20,5,5,10,5,5,20,5,10,5,5,5,10,5,5,5,5,5,5,5,10,5,5,5,5,20,5,5,5,5,5,5,20,10,5,10,5,5,5,20,20,10,5,5,5,5,20,5,5,10,10,5,5,10,10,5,10,5,5,10,10,5,5,5,20,10,10,5,10,5,5,20,5,5,20,5,5,10,20,5,10,5,5,5,5,5,5,5,5,20,5,20,5,10,5,5,10,5,5,5,10,5,5,10,10,10,5,5,20,20,5,5,5,5,20,5,5,5,5,10,20,5,10,10,5,5,20,20,5,5,5,5,5,20,20,10,20,20,10,10,5,20,20,5,5,20,10,10,20,5,5,5,5,5,5,20,5,5,10,20,5,5,5,5,5,20,10,10,5,5,5,5,5,10,5,20,5,5,5,20,10,10,10,5,10,5,5,5,20,5,10,20,20,5,5,5,5,20,10,10,10,20,5,5,20,5,5,5,5,5,10,5,20,5,10,5,20,5,5,20,10,20,5,5,10,5,5,5,5,5,5,5,5,20,20,5,5,20,5,10,10,5,5,10,10,20,5,5,20,10,10,20,5,20,5,5,10,5,10,5,20,10,5,5,10,10,5,5,5,5,20,5,10,5,10,5,10,20,5,5,10,20,5,10,5,5,5,10,5,5,10,5,10,10,5,20,10,5,5,5,20,5,10,5,5,5,5,5,20,5,20,20,5,20,5,5,10,5,20,5,5,20,20,20,20,10,5,10,5,5,20,10,5,5,10,5,5,5,5,5,10,5,5,5,5,5,5,5,5,5,10,5,5,5,5,10,10,5,5,5,5,5,5,5,10,5,5,5,5,5,10,5,5,20,10,20,10,10,20,20,5,5,10,5,5,5,10,5,10,5,5,10,5,5,5,5,10,10,5,10,5,20,5,20,5,5,5,5,5,20,5,10,20,5,20,10,5,5,5,5,10,10,20,10,20,5,10,5,20,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,20,5,5,5,10,20,5,20,5,5,5,5,10,5,5,5,5,5,10,10,10,20,10,10,20,5,5,20,5,10,5,5,5,5,5,5,5,20,10,5,20,5,10,20,10,20,5,5,5,5,5,5,20,5,5,20,20,5,10,5,5,10,5,5,20,5,5,5,20,5,20,10,5,5,5,10,10,20,5,10,10,5,20,10,5,5,10,20,20,5,5,5,5,10,5,5,10,20,5,10,5,10,5,5,10,5,20,5,10,5,20,20,10,5,20,10,5,5,5,10,10,10,20,20,5,20,10,5,5,5,5,5,20,5,10,5,5,10,10,5,10,5,5,10,20,5,5,5,5,5,5,10,5,20,10,20,20,5,5,5,10,5,20,5,5,5,5,5,5,5,5,20,10,5,5,20,5,5,20,5,20,5,5,5,10,5,5,5,5,5,5,5,5,10,5,5,10,5,20,10,5,20,5,5,10,5,5,20,5,5,10,5,20,5,5,10,5,20,5,10,5,20,20,5,5,5,20,20,5,5,5,20,5,5,20,10,20,5,5,5,10,5,5,5,5,10,5,5,5,20,20,5,5,5,20,5,10,10,10,5,5,5,5,20,5,5,10,5,20,5,5,5,5,5,5,5,10,5,5,5,20,5,5,10,5,5,5,5,5,5,20,5,5,5,5,5,10,20,5,5,20,5,20,5,5,20,10,5,5,5,20,10,5,20,20,5,5,5,5,20,20,5,5,5,5,5,20,5,10,10,5,20,5,10,5,5,10,5,20,20,5,5,20,5,10,5,5,20,5,10,10,5,5,5,5,5,5,5,5,20,20,5,20,20,5,5,5,5,5,5,10,5,5,5,5,5,5,10,5,5,20,5,5,5,20,5,5,20,20,5,5,5,10,5,10,20,5,5,5,5,10,5,5,10,5,5,10,5,5,20,5,5,5,5,5,5,5,10,5,5,20,5,5,10,5,5,5,5,5,5,5,5,20,10,5,5,5,5,5,5,20,10,5,10,5,10,5,10,20,20,20,10,5,5,10,5,10,5,5,5,5,5,5,5,5,10,5,10,5,5,5,5,10,10,20,20,5,5,20,5,5,10,20,20,10,5,5,5,5,5,5,20,5,5,10,20,20,10,5,5,5,5,5,5,5,20,10,5,5,10,5,5,5,10,5,5,20,20,5,5,5,5,20,5,20,5,5,5,5,5,5,10,5,5,5,5,5,5,5,5,5,5,20,5,10,20,20,20,10,5,5,5,5,10,5,5,20,20,5,20,5,10,5,5,5,5,5,5,20,10,5,5,5,5,5,5,5,5,5,5,20,5,5,5,5,5,20,5,5,20,10,10,5,5,5,5,5,5,20,10,5,20,5,20,5,5,5,5,5,10,5,5,20,20,5,10,20,5,10,5,20,5,5,5,5,5,5,10,20,5,5,5,10,10,5,20,5,5,10,5,5,10,10,5,5,20,10,5,5,20,10,10,5,5,20,5,5,5,20,5,10,10,5,5,5,5,5,5,5,20,10,20,20,5,20,5,5,5,5,5,5,5,20,10,10,5,5,5,5,20,5,5,20,5,10,5,5,5,10,20,10,5,20,20,10,20,10,20,10,5,5,5,5,5,10,10,5,5,5,5,10,10,5,5,5,5,5,5,5,5,5,10,5,10,5,5,20,20,10,5,5,20,5,5,5,5,5,5,5,5,20,20,5,10,20,10,5,10,5,20,5,5,10,5,10,20,5,5,5,20,5,5,5,5,10,5,20,20,5,5,20,20,10,20,20,10,5,5,5,5,10,10,5,20,10,5,5,20,5,5,5,5,5,5,5,5,10,5,5,20,5,20,5,5,5,20,5,5,10,20,5,10,5,5,10,20,5,5,10,5,5,20,5,5,10,10,5,5,5,5,5,5,5,5,5,5,20,5,5,10,10,20,5,5,10,5,5,5,20,5,20,5,20,5,5,10,5,20,5,5,5,5,5,5,5,10,5,10,5,20,5,20,5,10,5,5,5,5,10,5,5,5,10,5,20,5,5,5,5,5,20,5,5,5,5,10,5,5,10,10,10,20,5,5,20,20,5,5,5,5,5,5,5,5,5,20,10,5,10,20,5,5,5,5,5,5,20,5,20,5,10,10,5,5,5,20,5,5,5,5,5,5,10,10,5,5,5,5,5,5,20,5,5,5,5,20,5,5,20,5,10,20,5,10,10,5,5,5,5,20,10,5,5,5,5,20,20,20,5,5,5,10,5,5,5,5,10,5,5,5,20,20,5,20,5,5,10,5,5,5,5,20,10,5,10,5,5,5,5,5,5,5,20,5,10,5,10,5,5,5,5,20,20,5,5,5,20,5,5,5,20,5,10,5,5,10,5,5,5,5,5,10,20,5,10,10,5,5,10,5,5,5,10,20,5,20,5,10,5,5,10,5,5,5,5,5,5,5,5,5,5,20,5,5,5,5,5,5,5,5,10,20,10,20,5,10,20,5,5,10,5,5,5,5,10,5,10,20,5,5,20,10,5,20,20,5,5,5,5,5,5,5,5,5,10,5,5,5,20,5,20,20,5,5,5,5,10,5,20,5,20,5,5,5,20,5,20,5,5,20,10,5,10,5,5,10,5,5,5,5,5,5,5,10,10,10,20,10,5,5,10,5,20,5,20,5,20,5,5,5,5,10,5,5,10,5,5,5,5,5,5,20,5,20,5,5,5,20,5,20,20,20,5,5,5,20,5,10,20,5,10,20,20,5,5,5,20,5,5,5,5,10,5,20,20,5,5,5,20,10,5,5,20,5,20,5,5,20,20,5,10,5,5,20,10,20,10,10,20,5,5,10,10,20,10,5,5,5,10,20,5,5,20,5,20,5,10,5,5,20,20,5,5,5,5,5,5,5,10,20,5,5,5,20,5,5,20,5,20,5,20,5,5,10,5,5,10,10,5,5,5,5,5,20,10,10,5,5,5,20,10,5,5,5,5,20,20,5,10,10,5,5,5,10,5,5,10,20,20,5,5,10,10,10,5,5,5,5,5,20,10,5,5,5,20,20,20,20,20,5,5,5,20,10,20,20,5,5,5,10,20,5,10,10,5,10,5,5,10,5,10,20,5,5,10,5,20,5,5,20,5,5,5,20,5,5,5,5,10,20,10,10,5,5,10,5,5,5,10,5,5,20,20,20,20,5,5,20,5,5,5,5,5,5,5,5,5,5,5,5,20,5,5,20,20,10,20,5,20,10,10,5,5,10,5,5,20,5,20,5,10,5,10,5,5,10,10,20,20,20,5,10,5,10,5,20,10,5,5,5,20,20,20,20,5,5,5,5,10,5,5,5,5,20,5,5,10,10,20,5,5,10,5,10,5,5,20,10,20,5,5,5,10,5,5,20,5,5,20,10,5,5,10,10,5,10,5,5,5,20,10,5,10,20,5,5,5,5,5,20,5,5,5,20,5,5,5,20,10,5,20,10,10,20,5,5,5,5,5,5,5,5,5,10,5,5,5,5,5,5,20,5,5,5,5,5,5,20,5,5,5,20,5,20,5,20,20,10,5,10,20,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,20,5,5,5,20,5,5,20,5,5,5,5,20,5,20,10,5,5,5,5,5,5,5,5,5,20,5,5,20,20,5,5,5,5,5,5,5,5,5,5,20,5,5,5,20,5,20,10,5,20,5,5,5,20,20,5,10,5,10,5,10,10,10,5,5,5,5,5,5,5,5,10,10,5,10,5,20,10,5,5,5,5,5,5,10,5,5,20,5,10,5,5,20,5,10,5,5,20,5,20,5,5,20,20,20,5,5,20,5,20,5,20,5,5,20,5,5,5,5,10,5,5,5,10,5,10,10,5,5,5,5,5,5,5,20,10,5,5,5,20,5,20,5,5,20,5,5,5,5,5,5,20,5,5,20,20,5,5,5,10,5,5,5,10,5,20,5,5,20,5,5,5,5,10,5,10,5,10,10,5,5,10,5,20,20,10,5,10,10,20,5,10,5,5,5,10,5,10,5,5,5,10,5,20,5,5,5,10,20,20,5,5,10,5,20,5,20,5,10,5,10,5,5,5,5,10,5,5,5,5,5,5,20,5,5,5,5,5,20,5,5,10,5,5,5,5,5,10,5,20,5,5,20,5,20,5,5,20,5,20,5,5,10,5,5,5,5,5,5,20,20,5,10,5,10,5,5,5,10,5,5,5,20,5,5,5,10,5,5,5,10,10,5,20,5,5,10,5,5,5,20,5,5,10,5,10,5,10,5,5,5,5,5,20,10,10,5,20,5,5,5,10,10,5,5,5,10,10,5,5,20,5,5,5,5,5,5,5,10,5,20,10,20,5,5,5,5,5,5,20,10,5,20,20,10,5,5,10,10,10,5,10,5,10,20,20,20,20,10,5,5,20,20,20,5,20,20,5,5,5,5,5,10,5,5,5,5,10,20,5,10,10,5,5,5,5,10,5,5,5,5,20,10,5,5,5,20,20,5,10,5,10,5,20,5,5,5,10,5,5,10,20,5,5,20,5,5,10,5,20,5,10,5,10,10,10,10,5,5,20,5,20,20,5,20,20,5,10,20,5,5,5,5,5,5,5,20,20,5,10,10,10,5,5,5,10,5,5,5,20,5,5,5,10,20,5,10,20,10,20,10,5,5,5,5,10,10,5,5,20,20,20,5,20,20,5,5,20,5,10,5,10,5,5,5,5,5,5,5,20,5,10,10,5,20,10,5,5,5,5,5,5,10,5,5,5,20,5,5,5,5,5,20,20,5,5,5,5,10,20,10,5,5,20,20,10,20,20,20,5,10,20,5,5,10,10,20,10,10,5,5,20,5,5,5,20,5,5,5,5,20,10,5,10,5,10,10,10,10,5,5,5,20,5,5,5,5,5,5,5,20,5,20,5,10,10,10,5,5,5,10,5,5,20,20,5,5,20,5,10,10,20,20,5,5,10,10,5,5,20,5,5,5,5,10,20,5,5,5,10,20,5,5,20,5,5,5,5,10,10,5,5,20,5,5,5,20,5,5,5,5,5,5,5,20,20,5,5,5,5,20,20,20,10,5,5,5,5,10,20,5,20,20,20,5,5,5,5,10,20,5,5,5,5,5,5,5,20,5,5,5,10,20,20,5,5,5,5,20,5,20,5,5,5,5,5,5,10,10,10,5,20,10,5,5,20,20,5,20,10,5,10,5,20,20,5,10,5,5,5,5,5,5,5,5,5,20,20,5,20,20,5,20,10,10,20,5,5,20,5,5,5,5,10,5,5,5,10,5,5,10,10,20,10,5,5,5,5,5,10,5,5,5,5,10,5,10,5,5,5,5,5,5,5,5,10,10,5,5,10,5,10,10,5,5,20,20,10,10,5,5,20,20,5,5,5,5,5,10,20,10}));

        //bestTimeToBuyStocks(new int[]{7,1,5,3,6,4});

        //System.out.println( isHappy(7));

       // System.out.println(containsNearbyDuplicate(new int[]{1,0,1,1},1));

        //System.out.println(nextGreatestLetter(new char[]{'c','f','j'},'k'));// need to complete
        //System.out.println(convert("Apalindromeisaword,phrase,number,orothersequenceofunitsthatcanbereadthesamewayineitherdirection,withgeneralallowancesforadjustmentstopunctuationandworddividers.",3));

       // System.out.println(countElements(new int[]{-89,39,39,-89,39,39}));

       // System.out.println(findLonely(new int[]{69,45,69}));

        //System.out.println(longestCommonPrefix(new String[]{"a","b"}));

        //System.out.println(reverseStr("abcdefg", 2));

        //System.out.println(longestPalindrome("civilwartestingwhetherthatnaptionoranynartionsoconceivedandsodedicatedcanlongendureWeareqmetonagreatbattlefiemldoftzhatwarWehavecometodedicpateaportionofthatfieldasafinalrestingplaceforthosewhoheregavetheirlivesthatthatnationmightliveItisaltogetherfangandproperthatweshoulddothisButinalargersensewecannotdedicatewecannotconsecratewecannothallowthisgroundThebravelmenlivinganddeadwhostruggledherehaveconsecrateditfaraboveourpoorponwertoaddordetractTgheworldadswfilllittlenotlenorlongrememberwhatwesayherebutitcanneverforgetwhattheydidhereItisforusthelivingrathertobededicatedheretotheulnfinishedworkwhichtheywhofoughtherehavethusfarsonoblyadvancedItisratherforustobeherededicatedtothegreattdafskremainingbeforeusthatfromthesehonoreddeadwetakeincreaseddevotiontothatcauseforwhichtheygavethelastpfullmeasureofdevotionthatweherehighlyresolvethatthesedeadshallnothavediedinvainthatthisnationunsderGodshallhaveanewbirthoffreedomandthatgovernmentofthepeoplebythepeopleforthepeopleshallnotperishfromtheearth"));

        //System.out.println(areNumbersAscending("hello world 5 x 5"));

        //binarySearchWithoutUseLengthFn();

        //System.out.println(findPeaks(new int[]{1,4,3,8,5}));

       // System.out.println(findPeakElement(new int[]{1,2}));

        System.out.println(findJudge(3,new int[][]{{1,3},{2,3},{3,1}}));
    }

    public static int findJudge(int N, int[][] trust) {
        int[] in = new int[N + 1];
        int[] out = new int[N + 1];
        for (int[] a : trust) {
            out[a[0]]++;
            in[a[1]]++;
        }
        for (int i = 1; i <= N; ++i) {
            if (in[i] == N - 1 && out[i] == 0)
                return i;
        }
        return -1;
    }

    public static int findPeakElement(int[] mountain) {
        if(mountain.length <= 1) return 0;
        int st = 0;
        int en = mountain.length-1;
        while (st<=en){
            int mid = st+(en-st)/2;
            if(mid+1 < mountain.length) {
                if (mountain[mid] > mountain[mid + 1]) {
                    //if(mountain[mid] > mountain[mid+1] ) return mid;
                    en = mid - 1;
                } else {
                    st = mid + 1;
                }
            }else break;
        }
        return st;
    }
    public static List<Integer> findPeaks(int[] mountain) {
        //       int st = 0;
//        int en = mountain.length-1;int temp=0;
//        while (st<=en){
//            int mid = st+(en-st)/2;
//            if(mountain[mid] == mountain[mid+1]){
//                return 0;
//            } else if (mountain[mid] > mountain[mid+1]) {
//                if(mountain[mid] > mountain[mid+1] && mountain[mid] > mountain[mid-1]) return mid;
//                en=mid-1;temp = en;
//            }else {
//                st=mid+1;temp = st;
//            }
//        }
//        return temp+1;

        List<Integer> ls = new ArrayList<>();
        for (int i = 1; i < mountain.length-1; i++) {
            int tem = mountain[i];
            if(tem>mountain[i-1]  && tem >mountain[i+1]){
                ls.add(i);
            } else if (tem == mountain[i+1]) {
                return ls;
            }
        }
        return ls;

    }

    private static void binarySearchWithoutUseLengthFn() {
        int[] arr = {1,2,3,4,5,6,7,8,9,10,11,23,45,66,77,80,88,99,100};int t=99;
        int st = 0;
        int en = 1;
        while (arr[en]<t){
            int temp = en+1;
            en = en + (en-st+1)*2;
            st = temp;
        }
        while (st<en){
            int mid = st+(en-st)/2;
            if(arr[mid] == t){
                System.out.println(arr[mid]);break;
            } else if (arr[mid] < 10) {
                en=mid-1;
            }else {
                st=mid+1;
            }
        }

    }

    public static boolean areNumbersAscending(String s) {
        s=s.trim();
        if(s.isEmpty()) return false;
        int check = 0;
        String[] ss = s.split(" ");
        for(int j=0;j<ss.length;j++) {
            int i=0;
            String sub = ss[j];
            while (i < 1) {
                if (Character.isDigit(sub.charAt(i))) {
                    int num = Integer.parseInt(sub);
                    if (num <= check) {
                        return false;
                    }check = num;
                    i++;
                }else {
                    break;
                }
            }
        }
        return true;
    }

    public static int longestPalindrome(String s) {
        if(s.isEmpty()) return 0;
        if(s.length() ==1) return s.length();

        HashMap<Character,Integer> hmap = new HashMap<>();
        for(int i=0;i<s.length();i++){
            hmap.put(s.charAt(i),hmap.getOrDefault(s.charAt(i),0)+1);
        }
        int count =0;
        boolean flag=true;
        for(int i=0;i<s.length();i++){
            if(hmap.containsKey(s.charAt(i)) ) {
                int temp = hmap.get(s.charAt(i));
                if (temp > 1) {
                    if(temp % 2 != 0) {
                        count += temp-1;
                    }else {
                        count += temp;
                    }
                    hmap.remove(s.charAt(i));
                }else if (hmap.get(s.charAt(i)) == 1) flag = false;
            }

        }

        return  count%2 != 0 && !flag ? count : flag ? count  : count+1;
    }

    public static String reverseStr(String s, int k) {
        char[] arr = s.toCharArray();
        if(arr.length<=k) {
            swap(arr, 0, arr.length-1);
            return new String(arr);
        }
        int count = 0; boolean check = true;
        for(int i =0; i<arr.length; i += k){
            if(count != 0) {
                swap(arr, i-k, i-1);
                check = false;
            }else if(count == 0) check = true;

            if(check) count=i+k; else count=0;
        }
        if(count>0 && check) swap(arr, count-k, arr.length-1);
        return new String(arr);
    }

    static void swap(char[] arr, int start, int end){
        while(start<end){
            char c = arr[start];
            arr[start] = arr[end];
            arr[end] = c;
            start ++; end --;
        }
    }

    public static String longestCommonPrefix(String[] strs) {
        String smStr = strs[0];
        if(strs.length == 1)return strs[0];
        for(int i = 1;i<strs.length;i++){
            if(smStr.length()>strs[i].length()) smStr = strs[i];
        }strs[0].contains("");
        //if(smStr.length() == 1)return smStr;
        String s = ""; int start = 0; int end = smStr.length()-1;
        while(start<=end){
            int mid = start+(end-start)/2;
            if(findCommon(strs, smStr.charAt(mid), mid)){
                start = mid+1;
            }else{
                end = mid-1;
            }
        }
        end = end < 0 ? 0 : end +1;
        return  smStr.substring(0,end);
    }

    static boolean findCommon(String [] strs, char c, int index){
        for(int i =0;i<strs.length;i++){
            if(strs[i].charAt(index) != c) return false;
        }
        return true;
    }

    public static List<Integer> findLonely(int[] nums) {
        List<Integer> ls = new ArrayList<>();
//        String s = "";
//        for (int i:nums) s +=" "+i+" ";
//        System.out.println(s);
//        for (int i = 0; i < nums.length; i++) {
//            int pre = nums[i]-1;
//            int post = nums[i]+1;
//            if(!s.contains(" "+pre+" ") && !s.contains(" "+post+" ") && (s.indexOf(" "+nums[i]+" ") == s.lastIndexOf(" "+nums[i]+" ")))
//                ls.add(nums[i]);
//        }

        HashMap<Integer,Integer> hs = new HashMap<>();
        for(int i:nums) hs.put(i,hs.getOrDefault(i, 0)+1);

        for(int k:hs.keySet()) if(!hs.containsKey(k-1) && !hs.containsKey(k+1) && hs.get(k) ==1) ls.add(k);
        return ls;
        //return ls;
    }

    public static int countElements(int[] nums) {
        Arrays.sort(nums);
        int count = 0;int temp1 = nums[0];int temp2 = nums[nums.length-1];
        for(int i=1;i<nums.length-1;i++){
            if(temp1 != nums[i] && nums[i] != temp2) count++;

            if(nums[i] ==  temp2) break;
        }int a = '0'-'1';
        System.out.println(a);
        return count ;
    }

    public static String convert(String s, int numRows) {
        boolean flag = true;System.out.println(s.length()+" "+(numRows+1)+(s.length()/numRows));
        char[][] arr = new char [numRows][100];
        int row = 0;
        int col = 0;
        int count = 0;
        while(count < s.length()){
            arr[row][col] = s.charAt(count);
            if(flag){
                if(row == numRows-1){
                    flag = false;
                    --row; col++;
                }else  row ++;
            }else{
                if(row <=0){
                    flag = true;
                    row++;
                }else{
                    row --;
                    col ++;
                }
            }
            count++;
        }

        String ss = "";
        for(int i=0;i< arr.length;i++){
            for(int j=0;j<arr[i].length;j++){
                if(Character.isAlphabetic(arr[i][j]) || arr[i][j] == ',' || arr[i][j]=='.') ss+=arr[i][j];
            }
        }
        return ss;
    }
    public static char nextGreatestLetter(char[] l, char t) {
        if(t == l[l.length-1] || t=='z') return l[0];
        if(t == l[0]) return l[1];int[][] arr = new int [4][];
        int st = 0;
        int en = l.length-1;

        while(st<en){
            int mid = (st+en) /2;
            if(l[mid] > t){
                en=mid-1;
            }else{
                st=mid+1;
            }
        }
        return l[en];
    }
    public static boolean containsNearbyDuplicate(int[] nums, int k) {
        if(nums == null || nums.length < 2 || k == 0)
            return false;
//        String s = "";
//       for(int i=0;i<nums.length;i++) s+=nums[i];
//
//        for(int i=0;i<nums.length;i++){
//            System.out.println(s.indexOf("-1", i) +" "+ s.lastIndexOf("-1"));
//            if((s.indexOf(s.charAt(i), i) != s.lastIndexOf(s.charAt(i)))){
//                if((s.lastIndexOf(s.charAt(i)) - s.indexOf(s.charAt(i), i)) <= k) return true;
//            }else continue;
//        }

        HashSet<Integer> ls = new HashSet<>();int j=0;
        for(int i=0;i<nums.length;i++){
            if(!ls.add(nums[i])){
                return true;
            }
            if(ls.size()>k){
                ls.remove(ls.remove(nums[j++]));
            }
        }

        return false;

    }

    public static boolean isHappy(int n) {
        if(n == 1) return true;
        if(n>1 && n<10) return false;
        int temp = 0;

        while (n>0){
            temp = temp*10 + n%10;
            n /= 10;
            if(n == 0){
                int rev = reverseNum(temp);
                if(rev == 1) return true;
                n=rev;
                temp = 0;
            }
        }
        return false;
    }

    static int reverseNum(int temp){
        int rev =0;
        while(temp>0){
            rev = rev + (int) Math.pow(temp%10,2);
            temp /= 10;
        }
        return rev;
    }
    private static void bestTimeToBuyStocks(int[] ints) {
        int max = 0;
        int min = Integer.MAX_VALUE;
        int profit = 0;

        for (int i = 0; i < ints.length ; i++) {
            if(ints[i] < min){
                profit = profit+(max-min);
                min = ints[i];
                max = 0;
            }else{
                max = Math.max(max, ints[i]);
                profit = profit+(max-min);
            }
        }
        System.out.println(profit);
    }

    public static boolean lemonadeChange(int[] bills) {
        int fiv = 0;
        int ten = 0;
        int twon = 0;
        int count = 0;
        for(int i=0;i<bills.length;i++){
            if(bills[i] == 5){
                fiv++;
                continue;
            }else if(bills[i] == 10){
                ten++;
                count = 5;
                if(fiv>0){
                    fiv --;
                }else{
                    return false;
                }
                continue;
            }else{
                twon++;
                count = 15;
                if(ten>0 && fiv>0 ){
                    fiv--;
                    ten--;
                }else if(fiv>=4){
                    fiv -=4;
                }else return false;
            }
        }
        return true;
    }

    public static int hammingWeight(int n) {
        n=00000000000000000000000000001011;
        String s = "00000000000000000000000000001011";
        if(!s.contains("0")) return s.length();
        if(!s.contains("1")) return 0;

        int count=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i) == '1') count++;
        }
        return count;
    }

    public static boolean detectCapitalUse(String word) {
        char[] arr = word.toCharArray();
        if(arr[0] >= 'A' && arr[0] <= 'Z'){
            int sm=0;int bg =1;
            for(int i=1;i<arr.length;i++){
                if(arr[i] >= 'a' && arr[i] <= 'z') sm++;
                if(arr[i] >= 'A' && arr[i] <= 'Z') bg++;

                if(sm>=1 && bg>1 ) return false;
            }
        }else{
            for(int i=1;i<arr.length;i++){
                if(arr[i] >= 'A' && arr[i] <= 'Z') return false;
            }
        }
        return true;
    }

    public static int romanToInt(String s) {
        Map<Character,Integer> list = new HashMap<>() ;
        list.put('I',1);
        list.put('V',5);
        list.put('X',10);
        list.put('L',50);
        list.put('C',100);
        list.put('D',500);
        list.put('M',1000);
        int sum = 0;
        // int pre = 0;
        for (int i = s.length() - 1; i >= 0; i--) {
            if(4 * (list.get(s.charAt(i))) < sum){
                sum -= list.get(s.charAt(i));
            }else{
                sum += list.get(s.charAt(i));
            }
            //  pre = list.get(s.charAt(i));
        }
        return sum;
    }
    public static int furthestBuilding(int[] h, int b, int l) {
        PriorityQueue<Integer> p = new PriorityQueue<>((a, c) -> c - a);
        int i = 0, diff = 0;
        for (i = 0; i < h.length - 1; i++) {
            diff = h[i + 1] - h[i];
            if (diff <= 0) {
                continue;
            }
            b -= diff;
            p.offer(diff);
            if (b < 0) {
                b += p.poll();
                l--;
            }

            if (l < 0) {
                break;
            }
        }
        return i;
    }
}
